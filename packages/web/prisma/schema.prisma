// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Post {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  createdBy   User   @relation(fields: [createdById], references: [id])
  createdById String

  @@index([name])
}

// Necessary for Next auth
model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? // @db.Text
  access_token             String? // @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? // @db.Text
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  refresh_token_expires_in Int?

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  contests      Contest[]       @relation("contestsCreated")
  problem       Problem[]
  userOnContest UserOnContest[]
  Post          Post[]
  Submission    Submission[]
}

model Problem {
  id          String     @id @default(uuid())
  title       String
  description String
  difficulty  Difficulty
  inputs      String[]
  outputs     String[]
  public      Boolean    @default(false)

  submissions Submission[]
  contest     Contest?     @relation(fields: [contestId], references: [id])
  contestId   String?
  user        User         @relation(fields: [userId], references: [id])
  userId      String
}

model Submission {
  id       String           @id @default(uuid())
  language Language
  code     String
  status   SubmissionStatus @default(PENDING)
  output   String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  problem   Problem  @relation(fields: [problemId], references: [id])
  problemId String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  contest   Contest  @relation(fields: [contestId], references: [id])
  contestId String
}

model Contest {
  id   String @id @default(uuid())
  name String

  start DateTime
  end   DateTime

  createdBy   User   @relation("contestsCreated", fields: [createdById], references: [id])
  createdById String

  problems Problem[]

  userOnContest UserOnContest[]
  Submission    Submission[]

  @@index([name])
}

model UserOnContest {
  id        String   @id @default(cuid())
  userId    String
  contestId String
  score     Int      @default(0)
  answers   String[] @default([])

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  contest Contest @relation(fields: [contestId], references: [id], onDelete: Cascade)

  @@unique([userId, contestId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Language {
  c
  cpp
  java
  python
  rust
}

enum SubmissionStatus {
  PENDING
  RUNNING
  PASSED
  FAILED
  ERROR
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}
